package com.brahvim.nerd.framework.shapes;

import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PMatrix;
import processing.core.PMatrix2D;
import processing.core.PMatrix3D;
import processing.core.PShape;
import processing.core.PVector;

public interface obj {

    void addChild(PShape who);

    void addChild(PShape who, int idx);

    void addName(String nom, PShape shape);

    void ambient(int rgb);

    void ambient(float gray);

    void ambient(float x, float y, float z);

    void applyMatrix(PMatrix source);

    void applyMatrix(PMatrix2D source);

    void applyMatrix(PMatrix3D source);

    void applyMatrix(float n00, float n01, float n02, float n10, float n11, float n12);

    void applyMatrix(float n00, float n01, float n02, float n03, float n10, float n11, float n12, float n13,
            float n20, float n21, float n22, float n23, float n30, float n31, float n32, float n33);

    void attrib(String name, float... values);

    void attrib(String name, int... values);

    void attrib(String name, boolean... values);

    void attribColor(String name, int color);

    void attribNormal(String name, float nx, float ny, float nz);

    void attribPosition(String name, float x, float y, float z);

    void beginContour();

    void beginShape();

    void beginShape(int kind);

    void bezierDetail(int detail);

    void bezierVertex(float x2, float y2, float x3, float y3, float x4, float y4);

    void bezierVertex(float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4);

    void colorMode(int mode);

    void colorMode(int mode, float max);

    void colorMode(int mode, float maxX, float maxY, float maxZ);

    void colorMode(int mode, float maxX, float maxY, float maxZ, float maxA);

    boolean contains(float x, float y);

    void curveDetail(int detail);

    void curveTightness(float tightness);

    void curveVertex(float x, float y);

    void curveVertex(float x, float y, float z);

    void disableStyle();

    void draw(PGraphics g);

    void emissive(int rgb);

    void emissive(float gray);

    void emissive(float x, float y, float z);

    void enableStyle();

    void endContour();

    void endShape();

    void endShape(int mode);

    void fill(int rgb);

    void fill(float gray);

    void fill(int rgb, float alpha);

    void fill(float gray, float alpha);

    void fill(float x, float y, float z);

    void fill(float x, float y, float z, float a);

    PShape findChild(String target);

    int getAmbient(int index);

    PShape getChild(int index);

    PShape getChild(String target);

    int getChildCount();

    int getChildIndex(PShape who);

    PShape[] getChildren();

    float getDepth();

    int getEmissive(int index);

    int getFamily();

    int getFill(int index);

    float getHeight();

    int getKind();

    String getName();

    PVector getNormal(int index);

    PVector getNormal(int index, PVector vec);

    float getNormalX(int index);

    float getNormalY(int index);

    float getNormalZ(int index);

    float getParam(int index);

    float[] getParams();

    float[] getParams(float[] target);

    PShape getParent();

    float getShininess(int index);

    int getSpecular(int index);

    int getStroke(int index);

    float getStrokeWeight(int index);

    PShape getTessellation();

    float getTextureU(int index);

    float getTextureV(int index);

    int getTint(int index);

    PVector getVertex(int index);

    PVector getVertex(int index, PVector vec);

    int getVertexCode(int index);

    int getVertexCodeCount();

    int[] getVertexCodes();

    int getVertexCount();

    float getVertexX(int index);

    float getVertexY(int index);

    float getVertexZ(int index);

    float getWidth();

    boolean is2D();

    boolean is3D();

    boolean isClosed();

    boolean isVisible();

    void noFill();

    void noStroke();

    void noTexture();

    void noTint();

    void normal(float nx, float ny, float nz);

    void print();

    void quadraticVertex(float cx, float cy, float x3, float y3);

    void quadraticVertex(float cx, float cy, float cz, float x3, float y3, float z3);

    void removeChild(int idx);

    void resetMatrix();

    void rotate(float angle);

    void rotate(float angle, float v0, float v1, float v2);

    void rotateX(float angle);

    void rotateY(float angle);

    void rotateZ(float angle);

    void scale(float s);

    void scale(float x, float y);

    void scale(float x, float y, float z);

    void set3D(boolean val);

    void setAmbient(int ambient);

    void setAmbient(int index, int ambient);

    void setAttrib(String name, int index, float... values);

    void setAttrib(String name, int index, int... values);

    void setAttrib(String name, int index, boolean... values);

    void setEmissive(int emissive);

    void setEmissive(int index, int emissive);

    void setFamily(int family);

    void setFill(boolean fill);

    void setFill(int fill);

    void setFill(int index, int fill);

    void setKind(int kind);

    void setName(String name);

    void setNormal(int index, float nx, float ny, float nz);

    void setPath(int vcount, float[][] verts);

    void setShininess(float shine);

    void setShininess(int index, float shine);

    void setSpecular(int specular);

    void setSpecular(int index, int specular);

    void setStroke(boolean stroke);

    void setStroke(int stroke);

    void setStroke(int index, int stroke);

    void setStrokeCap(int cap);

    void setStrokeJoin(int join);

    void setStrokeWeight(float weight);

    void setStrokeWeight(int index, float weight);

    void setTexture(PImage tex);

    void setTextureMode(int mode);

    void setTextureUV(int index, float u, float v);

    void setTint(boolean tint);

    void setTint(int fill);

    void setTint(int index, int tint);

    void setVertex(int index, PVector vec);

    void setVertex(int index, float x, float y);

    void setVertex(int index, float x, float y, float z);

    void setVisible(boolean visible);

    void shininess(float shine);

    void specular(int rgb);

    void specular(float gray);

    void specular(float x, float y, float z);

    void stroke(int rgb);

    void stroke(float gray);

    void stroke(int rgb, float alpha);

    void stroke(float gray, float alpha);

    void stroke(float x, float y, float z);

    void stroke(float x, float y, float z, float alpha);

    void strokeCap(int cap);

    void strokeJoin(int join);

    void strokeWeight(float weight);

    void texture(PImage tex);

    void textureMode(int mode);

    void tint(int rgb);

    void tint(float gray);

    void tint(int rgb, float alpha);

    void tint(float gray, float alpha);

    void tint(float x, float y, float z);

    void tint(float x, float y, float z, float alpha);

    void translate(float x, float y);

    void translate(float x, float y, float z);

    void vertex(float x, float y);

    void vertex(float x, float y, float z);

    void vertex(float x, float y, float u, float v);

    void vertex(float x, float y, float z, float u, float v);

    @Override
    boolean equals(Object obj);

    @Override
    int hashCode();

    @Override
    String toString();

}