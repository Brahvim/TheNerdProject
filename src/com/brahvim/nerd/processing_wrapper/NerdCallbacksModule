package com.brahvim.nerd.processing_wrapper;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.function.Consumer;

import com.brahvim.nerd.processing_callback_interfaces.hardware.keyboard.NerdKeyboardListener;
import com.brahvim.nerd.processing_callback_interfaces.hardware.mouse.NerdMouseListener;
import com.brahvim.nerd.processing_callback_interfaces.hardware.touch.NerdTouchListener;
import com.brahvim.nerd.processing_callback_interfaces.hardware.window.NerdWindowListener;

import processing.event.MouseEvent;

public class NerdCallbacksModule extends NerdModule {

	// region Fields.
	protected static final String NULL_LISTENER_ERROR_MESSAGE = "An object passed to `NerdSketch::add*Listener()` cannot be `null`.";

	// region Hardware callbacks!
	protected final LinkedHashSet<NerdMouseListener> MOUSE_LISTENERS = new LinkedHashSet<>(1);
	protected final LinkedHashSet<NerdTouchListener> TOUCH_LISTENERS = new LinkedHashSet<>(1);
	protected final LinkedHashSet<NerdWindowListener> WINDOW_LISTENERS = new LinkedHashSet<>(1);
	protected final LinkedHashSet<NerdKeyboardListener> KEYBOARD_LISTENERS = new LinkedHashSet<>(1);
	// endregion

	// region Workflow callbacks!
	protected final LinkedHashSet<Consumer<NerdSketch>>
	/*	 */ SETTINGS_LISTENERS,
			SETUP_LISTENERS,
			PRE_LISTENERS,
			PRE_DRAW_LISTENERS,
			DRAW_LISTENERS,
			POST_DRAW_LISTENERS,
			POST_LISTENERS,
			EXIT_LISTENERS,
			DISPOSAL_LISTENERS;
	// endregion

	// Adding a new list of callbacks to `NerdSketch`? Register it here!:
	protected final LinkedHashSet<?>[] LIST_OF_CALLBACK_LISTS;
	// Please see this class's constructor.

	// ...to remove callbacks! ðŸ˜‚:
	protected final HashSet<Consumer<NerdSketch>> CALLBACK_LISTENERS_TO_REMOVE = new HashSet<>(1);
	// endregion

	public NerdCallbacksModule(final NerdSketch p_sketch) {
		super(p_sketch);
		this.LIST_OF_CALLBACK_LISTS = new LinkedHashSet<?>[] {
				this.DRAW_LISTENERS, this.PRE_DRAW_LISTENERS, this.POST_DRAW_LISTENERS,
				this.SETTINGS_LISTENERS, this.SETUP_LISTENERS, this.EXIT_LISTENERS, this.DISPOSAL_LISTENERS,
				this.PRE_LISTENERS, this.POST_LISTENERS };
	}

	@Override
	protected void sketchConstructed(final NerdSketchBuilderSettings p_settings) {
		// Intializing these listeners:
		this.PRE_LISTENERS = p_settings.preListeners;
		this.POST_LISTENERS = p_settings.postListeners;
		this.DRAW_LISTENERS = p_settings.drawListeners;
		this.PRE_DRAW_LISTENERS = p_settings.preDrawListeners;
		this.POST_DRAW_LISTENERS = p_settings.postDrawListeners;

		// Intializing these listeners as well, haha!:
		this.EXIT_LISTENERS = p_settings.exitListeners;
		this.SETUP_LISTENERS = p_settings.setupListeners;
		this.SETTINGS_LISTENERS = p_settings.settingsListeners;
		this.DISPOSAL_LISTENERS = p_settings.disposalListeners;
	}

	// region Adding callback listeners.
	public void addSettingsListener(final Consumer<NerdSketch> p_settingsListener) {
		this.PRE_LISTENERS.add(Objects.requireNonNull(
				p_settingsListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addSetupListener(final Consumer<NerdSketch> p_setupListener) {
		this.SETUP_LISTENERS.add(Objects.requireNonNull(
				p_setupListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addPreListener(final Consumer<NerdSketch> p_preListener) {
		this.PRE_LISTENERS.add(Objects.requireNonNull(
				p_preListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addPostListener(final Consumer<NerdSketch> p_postListener) {
		this.POST_LISTENERS.add(Objects.requireNonNull(
				p_postListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addPreDrawListener(final Consumer<NerdSketch> p_preDrawListener) {
		this.PRE_DRAW_LISTENERS.add(Objects.requireNonNull(
				p_preDrawListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addDrawListener(final Consumer<NerdSketch> p_drawListener) {
		this.DRAW_LISTENERS.add(Objects.requireNonNull(
				p_drawListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addPostDrawListener(final Consumer<NerdSketch> p_postDrawListener) {
		this.POST_DRAW_LISTENERS.add(Objects.requireNonNull(
				p_postDrawListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addSketchExitListener(final Consumer<NerdSketch> p_exitListener) {
		this.EXIT_LISTENERS.add(Objects.requireNonNull(
				p_exitListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}

	public void addSketchDisposalListener(final Consumer<NerdSketch> p_disposalListener) {
		this.DISPOSAL_LISTENERS.add(Objects.requireNonNull(
				p_disposalListener, NerdCallbacksModule.NULL_LISTENER_ERROR_MESSAGE));
	}
	// endregion

	// region Removing callback listeners.
	// Don't need this many (since their implementations are the same!), but I'll
	// still keep them around in the case that internal workings change!

	public void removeSettingsListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removeSetupListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removePreListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removePostListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removePreDrawListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removeDrawListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removePostDrawListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removeSketchExitListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}

	public void removeSketchDisposalListener(final Consumer<NerdSketch> p_listener) {
		this.CALLBACK_LISTENERS_TO_REMOVE.add(p_listener);
	}
	// endregion

	private void removeRemovableCallbacks() {
		for (final LinkedHashSet<?> s : this.LIST_OF_CALLBACK_LISTS)
			s.removeAll(this.CALLBACK_LISTENERS_TO_REMOVE);
	}

	private void callCallbacksFrom(final LinkedHashSet<Consumer<NerdSketch>> p_setofCallbacks) {
		this.removeRemovableCallbacks();

		for (final Consumer<NerdSketch> c : p_setofCallbacks)
			c.accept(super.SKETCH);
	}

	// region Calling the callbacks!1!!!
	// region Workflow callbacks!
	@Override
	protected void settings() {
		this.callCallbacksFrom(this.SETTINGS_LISTENERS);
	}

	@Override
	protected void postSetup() {
		this.callCallbacksFrom(this.SETUP_LISTENERS);
	}

	@Override
	protected void pre() {
		this.callCallbacksFrom(this.PRE_LISTENERS);
	}

	@Override
	protected void preDraw() {
		this.callCallbacksFrom(this.PRE_DRAW_LISTENERS);
	}

	@Override
	protected void draw() {
		this.callCallbacksFrom(this.DRAW_LISTENERS);
	}

	@Override
	protected void postDraw() {
		this.callCallbacksFrom(this.POST_DRAW_LISTENERS);
	}

	@Override
	protected void post() {
		this.callCallbacksFrom(this.POST_LISTENERS);
	}

	@Override
	protected void exit() {
		this.callCallbacksFrom(this.EXIT_LISTENERS);
	}

	@Override
	protected void dispose() {
		this.callCallbacksFrom(this.DISPOSAL_LISTENERS);
	}
	// endregion

	// region Hardware callbacks!
	@Override
	protected void focusGained() {
	}

	@Override
	protected void focusLost() {
	}

	@Override
	protected void fullscreenChanged(final boolean p_state) {
	}

	@Override
	protected void monitorChanged() {
	}

	@Override
	protected void resized() {
	}

	@Override
	public void mouseClicked() {
	}

	@Override
	public void mouseDragged() {
	}

	@Override
	public void mouseMoved() {
	}

	@Override
	public void mousePressed() {
	}

	@Override
	public void mouseReleased() {
	}

	@Override
	public void mouseWheel(final MouseEvent p_mouseEvent) {
	}

	@Override
	public void keyPressed() {
	}

	@Override
	public void keyReleased() {
	}

	@Override
	public void keyTyped() {
	}

	@Override
	protected void touchEnded() {
	}

	@Override
	protected void touchMoved() {
	}

	@Override
	protected void touchStarted() {
	}
	// endregion
	// endregion

}
